javascript는 client web 기술로 이벤트처리와 문서 구조 변경, 스타일 변경에 사용되었지만, 현재는 서버 기술로도 사용되고 있으며 javascript를 사용하고 있는 영역이 광범위해지고 있습니다.

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<script>
//자바스크립트 코드 영역 - 함수 정의
//document.getElementById("memo").innerHTML="hello";
</script>
</head>

<body> 
<script>
//자바스크립트 코드 영역 -- 실행 코드 
document.write("자바스크립트 코드 실행 --body 영역에 출력");
</script> 
<p id="memo"></p>
</body>
</html>

if(조건식) {
    실행문장;  
 }else {
     실행문장;
 }
 
 if(조건식) {
    실행문장;  
 }else if{
     실행문장;
 }else if {
    실행문장;
 }else {
    실행문장;
}

for(var i=0;i<10;i++){
   실행 문장;
   }

while(조건) {
   실행문장;
}

이벤트 발생된 객체 (예] 버튼) - 이벤트 소스
이벤트 핸들러 - 이벤트 처리 (객체, 함수)

이벤트소스.addEventListener("이벤트", 이벤트핸들러, 이벤트캡처링여부);



################################################
웹 크롤링 : 웹 페이지의 하이퍼링크를 순회하면서 웹 페이지를 다운로드하는 작업

웹 스크레이핑 : 다운로드한 웹 페이지에서 필요한 콘텐츠를 추출하는 작업
웹 페이지를 구성하고 있는 HTML 태그의 콘텐츠나 속성의 값을 읽는 작업

URL(Uniform Resource Locator) :
네트워크 상에서 자원이 어디 있는지를 알려주기 위한 규약
컴퓨터 네트워크와 검색 메커니즘에서의 자원의 위치를 지정하는 문자열

URI(Uniform Resource Identity) :
웹 사이트에 요청하고자 하는 대상의 패스정보와 파일명으로 구성
파일명이 생략되면 디폴트로 index.html 사용

HTTP(HyperText Transfer Protocol) : 
웹상에서 클라이언트와 서버 간에 정보를 주고받을 수 있는 통신 규약(프로토콜)
URL 문자열을 직접 입력하거나, 하이퍼링크 텍스트 또는 이미지를 클릭하여 HTML 문서를 주고받는 데 사용
디폴트로 80번 포트 사용
다른 포트 번호를 사용하는 웹 서버에 요청 시 도메인명 뒤에  : 기호와 함께 포트 번호 지정

GET방식 :
브라우저에서 직접 요청하려는 페이지의 URL 문자열을 입력하여 요청
하이퍼링크가 설정된 텍스트나 이미지를 클릭하여 요청
Query 문자열 없는 요청과 Query 문자열을 추가한 요청 모두 가능
Query 문자열이 URL 문자열 뒤에 추가되어 전달

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
</head>
<body> 
<center>
<form action="data.jsp" method="GET">
<table>
<tr><td colspan="2">로그인
</td> 
 </tr>
<tr><td>아이디</td>
<td><input type="text" name="userid"></td></tr>
<tr><td>비밀번호</td>
<td><input type="password" name="userpwd"></td></tr>
<tr><td colspan="2">
<input type="submit" value="login">
<input type="reset"> 
</td> </tr>
</table>
</center>
</form>
</body>
</html>
 

POST방식 :
Query 문자열을 추가한 요청만 가능
Query 문자열이 요청 바디에 따로 담겨서 전달되므로 요청 URL 문자열에서는 볼 수 없음

SNS, 소셜 네트워킹 서비스(Social Networking Service) :
사용자 간의 자유로운 의사소통과 정보 공유, 인맥 확대 등을 통해  사회적 관계를 생성하고 강화해주는 온라인 플랫폼
최근 스마트폰 이용자의 증가와 무선인터넷 서비스의 확장과 더불어 SNS의 이용자 또한 급증하고 있음


OPEN API :
인터넷 이용자가 웹 검색 결과 및 사용자 화면 등을 제공받는데 그치지 않고 직접 응용 프로그램과 서비스를 개발할 수 있도록 공개된 개발자를 위한 인터페이스
대부분의 SNS 사이트들은 개발자로 등록하고 인증키를 받아 제공되는 API 사용


RSS(Really Simple Syndication/Rich Site Summary) :
뉴스나 블로그와 같이 콘텐츠 업데이트가 자주 일어나는 웹 사이트에서 업데이트된 정보를 정해진 규격의 XML 형식으로 자동화하여 사용자에게 제공하기 위한 서비스
RSS가 등장하기 전에는 원하는 정보를 얻기 위해 해당 사이트를 직접 방문해야 했음
RSS 관련 프로그램(혹은 서비스)을 이용하여 자동 수집이 가능해졌기 때문에 사용자는 각각의 사이트 방문 없이 최신 정보들만 골라 한 자리에서 볼 수 있음 


정적인 웹 페이지 기술  - HTML , CSS
동적인 웹 페이지 기술  - JavaScript , Ajax



import urllib.request 
res = urllib.request.urlopen("http://www.naver.com/")
print(type(res)) # http.client.HTTPResponse 클래스 
print(res.status)
print(res.version)
print(res.msg)
res_header = res.getheaders()
print("[header 정보]##############")
for s in res_header:
    print(s)


import urllib.request 
res = urllib.request.urlopen("http://70.12.116.160:8080/login/login.html")
print(res)
res_header = res.getheaders()
print("[header 정보]##############")
for s in res_header:
    print(s)

print("[body 정보]##############")
print(res.read().decode('utf-8')) 

#웹 페이지 인코딩 확인하기
import urllib.request 
url = 'http://www.python.org/'
f = urllib.request.urlopen(url)
print(type(f))
print(type(f.info()))
encoding= f.info().get_content_charset()
print(url, '페이지 인코딩 정보:', encoding)
text = f.read(500).decode(encoding)
print(text)

#url주소 해석 parse모듈 실습

from urllib.parse import urlparse
url2 = urlparse('https://docs.python.org/ko/3/library/urllib.request.html#module-urllib.request')
print('도메인 정보 : ', url2.netloc)
print('패스 정보  : ', url2.path)
print('쿼리 문자열 정보  : ', url2.query)
print('uri 스킴 정보  : ', url2.scheme)
print('포트 정보 : ', url2.port)
print('프레그먼트 정보 : ', url2.fragment)
print('URL 문자열 정보 : ', url2.geturl())
print('URL 객체 정보 : ', url2)





















